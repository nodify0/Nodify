"export default `\ntry {\n  helpers.log('Starting Instagram node execution');\n\n  const accessToken = node.properties.credential.value;\n  const accountId = node.properties.accountId.value;\n  const operation = node.properties.operation.value;\n\n  helpers.log('Operation:', operation);\n  helpers.log('Account ID:', accountId);\n\n  if (!accessToken) {\n    helpers.error('Access token is missing');\n    throw new Error('Instagram Graph API access token is required');\n  }\n\n  if (!accountId) {\n    helpers.error('Account ID is missing');\n    throw new Error('Instagram Business Account ID is required');\n  }\n\n  let endpoint = '';\n  let method = 'POST';\n  let body = null;\n\n  if (operation === 'createPost') {\n    const mediaType = node.properties.mediaType.value;\n    const caption = node.properties.caption.value;\n    const location = node.properties.location.value;\n\n    helpers.log('Creating post - Media type:', mediaType);\n\n    // Step 1: Create media container\n    let containerEndpoint = \\`https://graph.facebook.com/v18.0/\\${accountId}/media\\`;\n    let containerBody = {\n      caption: caption || ''\n    };\n\n    if (mediaType === 'IMAGE') {\n      const imageUrl = node.properties.imageUrl.value;\n      if (!imageUrl) {\n        helpers.error('Image URL is missing');\n        throw new Error('Image URL is required for image posts');\n      }\n      containerBody.image_url = imageUrl;\n      helpers.log('Image URL:', imageUrl);\n    } else if (mediaType === 'VIDEO') {\n      const videoUrl = node.properties.videoUrl.value;\n      if (!videoUrl) {\n        helpers.error('Video URL is missing');\n        throw new Error('Video URL is required for video posts');\n      }\n      containerBody.video_url = videoUrl;\n      containerBody.media_type = 'VIDEO';\n      helpers.log('Video URL:', videoUrl);\n    }\n\n    if (location) {\n      containerBody.location_id = location;\n    }\n\n    helpers.log('Creating media container');\n    const containerResponse = await fetch(\\`\\${containerEndpoint}?access_token=\\${accessToken}\\`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(containerBody)\n    });\n\n    const containerResult = await containerResponse.json();\n\n    if (!containerResponse.ok) {\n      helpers.error('Instagram API error creating container:', containerResult.error?.message || containerResult);\n      throw new Error(\\`Instagram API error: \\${containerResult.error?.message || 'Unknown error'}\\`);\n    }\n\n    const creationId = containerResult.id;\n    helpers.log('Container created with ID:', creationId);\n\n    // Step 2: Publish media container\n    helpers.log('Publishing media container');\n    const publishEndpoint = \\`https://graph.facebook.com/v18.0/\\${accountId}/media_publish\\`;\n    const publishResponse = await fetch(\\`\\${publishEndpoint}?access_token=\\${accessToken}\\`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ creation_id: creationId })\n    });\n\n    const publishResult = await publishResponse.json();\n\n    if (!publishResponse.ok) {\n      helpers.error('Instagram API error publishing:', publishResult.error?.message || publishResult);\n      throw new Error(\\`Instagram API error: \\${publishResult.error?.message || 'Unknown error'}\\`);\n    }\n\n    helpers.log('Post published successfully. Media ID:', publishResult.id);\n\n    return {\n      ...data,\n      instagram: publishResult\n    };\n\n  } else if (operation === 'createStory') {\n    const imageUrl = node.properties.imageUrl.value;\n    if (!imageUrl) {\n      helpers.error('Image URL is missing');\n      throw new Error('Image URL is required for stories');\n    }\n\n    helpers.log('Creating story with image:', imageUrl);\n\n    const storyEndpoint = \\`https://graph.facebook.com/v18.0/\\${accountId}/media\\`;\n    const storyResponse = await fetch(\\`\\${storyEndpoint}?access_token=\\${accessToken}\\`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        image_url: imageUrl,\n        media_type: 'STORIES'\n      })\n    });\n\n    const storyContainer = await storyResponse.json();\n\n    if (!storyResponse.ok) {\n      helpers.error('Instagram API error creating story container:', storyContainer.error?.message || storyContainer);\n      throw new Error(\\`Instagram API error: \\${storyContainer.error?.message || 'Unknown error'}\\`);\n    }\n\n    // Publish story\n    const publishEndpoint = \\`https://graph.facebook.com/v18.0/\\${accountId}/media_publish\\`;\n    const publishResponse = await fetch(\\`\\${publishEndpoint}?access_token=\\${accessToken}\\`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ creation_id: storyContainer.id })\n    });\n\n    const publishResult = await publishResponse.json();\n\n    if (!publishResponse.ok) {\n      helpers.error('Instagram API error publishing story:', publishResult.error?.message || publishResult);\n      throw new Error(\\`Instagram API error: \\${publishResult.error?.message || 'Unknown error'}\\`);\n    }\n\n    helpers.log('Story published successfully. Media ID:', publishResult.id);\n\n    return {\n      ...data,\n      instagram: publishResult\n    };\n\n  } else if (operation === 'createReel') {\n    const videoUrl = node.properties.videoUrl.value;\n    const caption = node.properties.caption.value;\n\n    if (!videoUrl) {\n      helpers.error('Video URL is missing');\n      throw new Error('Video URL is required for reels');\n    }\n\n    helpers.log('Creating reel with video:', videoUrl);\n\n    const reelEndpoint = \\`https://graph.facebook.com/v18.0/\\${accountId}/media\\`;\n    const reelResponse = await fetch(\\`\\${reelEndpoint}?access_token=\\${accessToken}\\`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        video_url: videoUrl,\n        media_type: 'REELS',\n        caption: caption || ''\n      })\n    });\n\n    const reelContainer = await reelResponse.json();\n\n    if (!reelResponse.ok) {\n      helpers.error('Instagram API error creating reel container:', reelContainer.error?.message || reelContainer);\n      throw new Error(\\`Instagram API error: \\${reelContainer.error?.message || 'Unknown error'}\\`);\n    }\n\n    // Publish reel\n    const publishEndpoint = \\`https://graph.facebook.com/v18.0/\\${accountId}/media_publish\\`;\n    const publishResponse = await fetch(\\`\\${publishEndpoint}?access_token=\\${accessToken}\\`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ creation_id: reelContainer.id })\n    });\n\n    const publishResult = await publishResponse.json();\n\n    if (!publishResponse.ok) {\n      helpers.error('Instagram API error publishing reel:', publishResult.error?.message || publishResult);\n      throw new Error(\\`Instagram API error: \\${publishResult.error?.message || 'Unknown error'}\\`);\n    }\n\n    helpers.log('Reel published successfully. Media ID:', publishResult.id);\n\n    return {\n      ...data,\n      instagram: publishResult\n    };\n\n  } else if (operation === 'getMediaInsights') {\n    const mediaId = node.properties.mediaId.value;\n    const metrics = node.properties.metrics.value || 'engagement,impressions,reach';\n\n    if (!mediaId) {\n      helpers.error('Media ID is missing');\n      throw new Error('Media ID is required for insights');\n    }\n\n    helpers.log('Getting insights for media ID:', mediaId);\n    helpers.log('Metrics:', metrics);\n\n    endpoint = \\`https://graph.facebook.com/v18.0/\\${mediaId}/insights?metric=\\${metrics}&access_token=\\${accessToken}\\`;\n    method = 'GET';\n\n    const response = await fetch(endpoint);\n    const result = await response.json();\n\n    if (!response.ok) {\n      helpers.error('Instagram API error getting insights:', result.error?.message || result);\n      throw new Error(\\`Instagram API error: \\${result.error?.message || 'Unknown error'}\\`);\n    }\n\n    helpers.log('Insights retrieved successfully');\n\n    return {\n      ...data,\n      instagram: result\n    };\n\n  } else if (operation === 'getAccountInsights') {\n    const metrics = node.properties.metrics.value || 'impressions,reach,profile_views';\n\n    helpers.log('Getting account insights');\n    helpers.log('Metrics:', metrics);\n\n    endpoint = \\`https://graph.facebook.com/v18.0/\\${accountId}/insights?metric=\\${metrics}&period=day&access_token=\\${accessToken}\\`;\n    method = 'GET';\n\n    const response = await fetch(endpoint);\n    const result = await response.json();\n\n    if (!response.ok) {\n      helpers.error('Instagram API error getting account insights:', result.error?.message || result);\n      throw new Error(\\`Instagram API error: \\${result.error?.message || 'Unknown error'}\\`);\n    }\n\n    helpers.log('Account insights retrieved successfully');\n\n    return {\n      ...data,\n      instagram: result\n    };\n  }\n\n} catch (error) {\n  helpers.error('Instagram node execution failed:', error.message);\n  throw error;\n}\n`;\n"