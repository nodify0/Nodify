{
  "id": "telegram",
  "version": "1.0",
  "name": "Telegram",
  "description": "Send messages, photos, videos, and documents to Telegram chats and channels.",
  "group": "Social Media",
  "category": "action",
  "shape": "circle",
  "color": "#0088cc",
  "icon": "Send",
  "inputs": [
    {
      "id": "main",
      "label": "Input",
      "position": "left",
      "type": "any",
      "slot": 1
    }
  ],
  "outputs": [
    {
      "id": "main",
      "label": "Output",
      "position": "right",
      "type": "json",
      "slot": 1
    }
  ],
  "properties": [
    {
      "name": "credential",
      "displayName": "Telegram Bot Token",
      "type": "credential",
      "credentialType": "telegram",
      "required": true,
      "description": "Bot token from @BotFather"
    },
    {
      "name": "operation",
      "displayName": "Operation",
      "type": "options",
      "default": "sendMessage",
      "options": [
        {
          "value": "sendMessage",
          "label": "Send Message"
        },
        {
          "value": "sendPhoto",
          "label": "Send Photo"
        },
        {
          "value": "sendVideo",
          "label": "Send Video"
        },
        {
          "value": "sendDocument",
          "label": "Send Document"
        },
        {
          "value": "sendAudio",
          "label": "Send Audio"
        }
      ],
      "description": "The operation to perform"
    },
    {
      "name": "chatId",
      "displayName": "Chat ID",
      "type": "string",
      "default": "",
      "required": true,
      "description": "Telegram chat ID or @username"
    },
    {
      "name": "text",
      "displayName": "Message Text",
      "type": "text",
      "default": "",
      "required": true,
      "description": "The message text to send",
      "displayOptions": {
        "show": {
          "operation": ["sendMessage"]
        }
      }
    },
    {
      "name": "parseMode",
      "displayName": "Parse Mode",
      "type": "options",
      "default": "Markdown",
      "options": [
        {
          "value": "Markdown",
          "label": "Markdown"
        },
        {
          "value": "HTML",
          "label": "HTML"
        },
        {
          "value": "None",
          "label": "None"
        }
      ],
      "description": "Text formatting mode",
      "displayOptions": {
        "show": {
          "operation": ["sendMessage"]
        }
      }
    },
    {
      "name": "fileUrl",
      "displayName": "File URL",
      "type": "string",
      "default": "",
      "required": true,
      "description": "URL of the file to send",
      "displayOptions": {
        "show": {
          "operation": ["sendPhoto", "sendVideo", "sendDocument", "sendAudio"]
        }
      }
    },
    {
      "name": "caption",
      "displayName": "Caption",
      "type": "text",
      "default": "",
      "description": "Caption for the media",
      "displayOptions": {
        "show": {
          "operation": ["sendPhoto", "sendVideo", "sendDocument", "sendAudio"]
        }
      }
    },
    {
      "name": "disableNotification",
      "displayName": "Disable Notification",
      "type": "boolean",
      "default": false,
      "description": "Send message silently"
    }
  ],
  "executionCode": "try {\n  helpers.log('Starting Telegram node execution');\n  \n  const botToken = node.properties.credential.value;\n  const chatId = node.properties.chatId.value;\n  const operation = node.properties.operation.value;\n  \n  helpers.log('Operation:', operation);\n  helpers.log('Chat ID:', chatId);\n  \n  if (!botToken) {\n    helpers.error('Bot token is missing');\n    throw new Error('Telegram bot token is required');\n  }\n  \n  if (!chatId) {\n    helpers.error('Chat ID is missing');\n    throw new Error('Chat ID is required');\n  }\n  \n  let endpoint = '';\n  let body = {\n    chat_id: chatId,\n    disable_notification: node.properties.disableNotification.value || false\n  };\n  \n  if (operation === 'sendMessage') {\n    endpoint = 'sendMessage';\n    body.text = node.properties.text.value;\n    const parseMode = node.properties.parseMode.value;\n    if (parseMode && parseMode !== 'None') {\n      body.parse_mode = parseMode;\n    }\n    helpers.log('Sending message:', body.text.substring(0, 50) + '...');\n  } else if (operation === 'sendPhoto') {\n    endpoint = 'sendPhoto';\n    body.photo = node.properties.fileUrl.value;\n    if (node.properties.caption.value) {\n      body.caption = node.properties.caption.value;\n    }\n    helpers.log('Sending photo:', body.photo);\n  } else if (operation === 'sendVideo') {\n    endpoint = 'sendVideo';\n    body.video = node.properties.fileUrl.value;\n    if (node.properties.caption.value) {\n      body.caption = node.properties.caption.value;\n    }\n    helpers.log('Sending video:', body.video);\n  } else if (operation === 'sendDocument') {\n    endpoint = 'sendDocument';\n    body.document = node.properties.fileUrl.value;\n    if (node.properties.caption.value) {\n      body.caption = node.properties.caption.value;\n    }\n    helpers.log('Sending document:', body.document);\n  } else if (operation === 'sendAudio') {\n    endpoint = 'sendAudio';\n    body.audio = node.properties.fileUrl.value;\n    if (node.properties.caption.value) {\n      body.caption = node.properties.caption.value;\n    }\n    helpers.log('Sending audio:', body.audio);\n  }\n  \n  helpers.log('Making request to Telegram API endpoint:', endpoint);\n  \n  const response = await fetch(`https://api.telegram.org/bot${botToken}/${endpoint}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  \n  const result = await response.json();\n  \n  if (!result.ok) {\n    helpers.error('Telegram API error:', result.description);\n    throw new Error(`Telegram API error: ${result.description}`);\n  }\n  \n  helpers.log('Message sent successfully. Message ID:', result.result.message_id);\n  \n  return {\n    ...data,\n    telegram: result.result\n  };\n  \n} catch (error) {\n  helpers.error('Telegram node execution failed:', error.message);\n  throw error;\n}",
  "meta": {
    "author": "Nodify System",
    "createdAt": "2025-10-23",
    "updatedAt": "2025-10-23"
  }
}
