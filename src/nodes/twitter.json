{
  "id": "twitter",
  "version": "1.0",
  "name": "Twitter / X",
  "description": "Post tweets, upload media, like, retweet, and manage Twitter/X content.",
  "group": "Social Media",
  "category": "action",
  "shape": "circle",
  "color": "#1DA1F2",
  "icon": "Twitter",
  "inputs": [
    {
      "id": "main",
      "label": "Input",
      "position": "left",
      "type": "any",
      "slot": 1
    }
  ],
  "outputs": [
    {
      "id": "main",
      "label": "Output",
      "position": "right",
      "type": "json",
      "slot": 1
    }
  ],
  "properties": [
    {
      "name": "credential",
      "displayName": "Twitter API Credentials",
      "type": "credential",
      "credentialType": "twitter",
      "required": true,
      "description": "Twitter API v2 Bearer Token or OAuth credentials"
    },
    {
      "name": "operation",
      "displayName": "Operation",
      "type": "options",
      "default": "tweet",
      "options": [
        {
          "value": "tweet",
          "label": "Post Tweet"
        },
        {
          "value": "retweet",
          "label": "Retweet"
        },
        {
          "value": "like",
          "label": "Like Tweet"
        },
        {
          "value": "reply",
          "label": "Reply to Tweet"
        },
        {
          "value": "search",
          "label": "Search Tweets"
        },
        {
          "value": "getUserTweets",
          "label": "Get User Tweets"
        }
      ],
      "description": "The operation to perform"
    },
    {
      "name": "tweetText",
      "displayName": "Tweet Text",
      "type": "text",
      "default": "",
      "required": true,
      "description": "The text content of the tweet (max 280 characters)",
      "displayOptions": {
        "show": {
          "operation": ["tweet", "reply"]
        }
      }
    },
    {
      "name": "mediaUrls",
      "displayName": "Media URLs",
      "type": "text",
      "default": "",
      "description": "Comma-separated URLs of images/videos to attach (max 4 images or 1 video)",
      "displayOptions": {
        "show": {
          "operation": ["tweet", "reply"]
        }
      }
    },
    {
      "name": "tweetId",
      "displayName": "Tweet ID",
      "type": "string",
      "default": "",
      "required": true,
      "description": "The ID of the tweet to interact with",
      "displayOptions": {
        "show": {
          "operation": ["retweet", "like", "reply"]
        }
      }
    },
    {
      "name": "searchQuery",
      "displayName": "Search Query",
      "type": "string",
      "default": "",
      "required": true,
      "description": "Search query for tweets",
      "displayOptions": {
        "show": {
          "operation": ["search"]
        }
      }
    },
    {
      "name": "maxResults",
      "displayName": "Max Results",
      "type": "number",
      "default": 10,
      "description": "Maximum number of results to return (1-100)",
      "displayOptions": {
        "show": {
          "operation": ["search", "getUserTweets"]
        }
      }
    },
    {
      "name": "userId",
      "displayName": "User ID",
      "type": "string",
      "default": "",
      "required": true,
      "description": "Twitter user ID to get tweets from",
      "displayOptions": {
        "show": {
          "operation": ["getUserTweets"]
        }
      }
    }
  ],
  "executionCode": "try {\\n  helpers.log('Starting Twitter/X node execution');\\n\\n  const bearerToken = node.properties.credential.value;\\n  const operation = node.properties.operation.value;\\n\\n  helpers.log('Operation:', operation);\\n\\n  if (!bearerToken) {\\n    helpers.error('Bearer token is missing');\\n    throw new Error('Twitter API bearer token is required');\\n  }\\n\\n  let endpoint = '';\\n  let method = 'GET';\\n  let body = null;\\n\\n  if (operation === 'tweet') {\\n    const tweetText = node.properties.tweetText.value;\\n    endpoint = 'https://api.twitter.com/2/tweets';\\n    method = 'POST';\\n    body = {\\n      text: tweetText\\n    };\\n    helpers.log('Posting tweet:', tweetText.substring(0, 50) + '...');\\n\\n  } else if (operation === 'retweet') {\\n    const tweetId = node.properties.tweetId.value;\\n    if (!tweetId) {\\n      helpers.error('Tweet ID is missing');\\n      throw new Error('Tweet ID is required for retweet operation');\\n    }\\n    endpoint = 'https://api.twitter.com/2/users/me/retweets';\\n    method = 'POST';\\n    body = {\\n      tweet_id: tweetId\\n    };\\n    helpers.log('Retweeting tweet ID:', tweetId);\\n\\n  } else if (operation === 'like') {\\n    const tweetId = node.properties.tweetId.value;\\n    if (!tweetId) {\\n      helpers.error('Tweet ID is missing');\\n      throw new Error('Tweet ID is required for like operation');\\n    }\\n    endpoint = 'https://api.twitter.com/2/users/me/likes';\\n    method = 'POST';\\n    body = {\\n      tweet_id: tweetId\\n    };\\n    helpers.log('Liking tweet ID:', tweetId);\\n\\n  } else if (operation === 'reply') {\\n    const tweetId = node.properties.tweetId.value;\\n    const tweetText = node.properties.tweetText.value;\\n    if (!tweetId) {\\n      helpers.error('Tweet ID is missing');\\n      throw new Error('Tweet ID is required for reply operation');\\n    }\\n    endpoint = 'https://api.twitter.com/2/tweets';\\n    method = 'POST';\\n    body = {\\n      text: tweetText,\\n      reply: {\\n        in_reply_to_tweet_id: tweetId\\n      }\\n    };\\n    helpers.log('Replying to tweet ID:', tweetId);\\n    helpers.log('Reply text:', tweetText.substring(0, 50) + '...');\\n\\n  } else if (operation === 'search') {\\n    const searchQuery = node.properties.searchQuery.value;\\n    const maxResults = node.properties.maxResults.value || 10;\\n    if (!searchQuery) {\\n      helpers.error('Search query is missing');\\n      throw new Error('Search query is required for search operation');\\n    }\\n    const query = encodeURIComponent(searchQuery);\\n    endpoint = `https://api.twitter.com/2/tweets/search/recent?query=${query}&max_results=${maxResults}`;\\n    helpers.log('Searching tweets with query:', searchQuery);\\n    helpers.log('Max results:', maxResults);\\n\\n  } else if (operation === 'getUserTweets') {\\n    const userId = node.properties.userId.value;\\n    const maxResults = node.properties.maxResults.value || 10;\\n    if (!userId) {\\n      helpers.error('User ID is missing');\\n      throw new Error('User ID is required for getUserTweets operation');\\n    }\\n    endpoint = `https://api.twitter.com/2/users/${userId}/tweets?max_results=${maxResults}`;\\n    helpers.log('Getting tweets for user ID:', userId);\\n    helpers.log('Max results:', maxResults);\\n  }\\n\\n  helpers.log('Making request to Twitter API');\\n  helpers.log('Method:', method);\\n  helpers.log('Endpoint:', endpoint);\\n\\n  const options = {\\n    method: method,\\n    headers: {\\n      'Authorization': `Bearer ${bearerToken}`,\\n      'Content-Type': 'application/json'\\n    }\\n  };\\n\\n  if (body) {\\n    options.body = JSON.stringify(body);\\n  }\\n\\n  const response = await fetch(endpoint, options);\\n  const result = await response.json();\\n\\n  if (!response.ok) {\\n    helpers.error('Twitter API error:', result.detail || result.title || result);\\n    throw new Error(`Twitter API error: ${result.detail || result.title || 'Unknown error'}`);\\n  }\\n\\n  helpers.log('Twitter operation completed successfully');\\n\\n  return {\\n    ...data,\\n    twitter: result\\n  };\\n\\n} catch (error) {\\n  helpers.error('Twitter node execution failed:', error.message);\\n  throw error;\\n}",
  "meta": {
    "author": "Nodify System",
    "createdAt": "2025-10-23",
    "updatedAt": "2025-10-23"
  }
}
