{
  "id": "linkedin",
  "version": "1.0",
  "name": "LinkedIn",
  "description": "Share posts, articles, and manage LinkedIn professional content.",
  "group": "Social Media",
  "category": "action",
  "shape": "circle",
  "color": "#0077B5",
  "icon": "Linkedin",
  "inputs": [
    {
      "id": "main",
      "label": "Input",
      "position": "left",
      "type": "any",
      "slot": 1
    }
  ],
  "outputs": [
    {
      "id": "main",
      "label": "Output",
      "position": "right",
      "type": "json",
      "slot": 1
    }
  ],
  "properties": [
    {
      "name": "credential",
      "displayName": "LinkedIn Access Token",
      "type": "credential",
      "credentialType": "linkedin",
      "required": true,
      "description": "LinkedIn API OAuth 2.0 access token"
    },
    {
      "name": "operation",
      "displayName": "Operation",
      "type": "options",
      "default": "createPost",
      "options": [
        {
          "value": "createPost",
          "label": "Create Post"
        },
        {
          "value": "createArticle",
          "label": "Create Article"
        },
        {
          "value": "shareImage",
          "label": "Share Image Post"
        },
        {
          "value": "shareVideo",
          "label": "Share Video Post"
        }
      ],
      "description": "The operation to perform"
    },
    {
      "name": "personUrn",
      "displayName": "Person URN",
      "type": "string",
      "default": "",
      "required": true,
      "description": "LinkedIn Person URN (e.g., urn:li:person:XXXXXXXX)"
    },
    {
      "name": "visibility",
      "displayName": "Visibility",
      "type": "options",
      "default": "PUBLIC",
      "options": [
        {
          "value": "PUBLIC",
          "label": "Public"
        },
        {
          "value": "CONNECTIONS",
          "label": "Connections Only"
        }
      ],
      "description": "Who can see this post"
    },
    {
      "name": "text",
      "displayName": "Post Text",
      "type": "text",
      "default": "",
      "required": true,
      "description": "The text content of the post",
      "displayOptions": {
        "show": {
          "operation": ["createPost", "shareImage", "shareVideo"]
        }
      }
    },
    {
      "name": "articleTitle",
      "displayName": "Article Title",
      "type": "string",
      "default": "",
      "required": true,
      "description": "Title of the article",
      "displayOptions": {
        "show": {
          "operation": ["createArticle"]
        }
      }
    },
    {
      "name": "articleText",
      "displayName": "Article Text",
      "type": "text",
      "default": "",
      "required": true,
      "description": "Content of the article",
      "displayOptions": {
        "show": {
          "operation": ["createArticle"]
        }
      }
    },
    {
      "name": "articleUrl",
      "displayName": "Article URL",
      "type": "string",
      "default": "",
      "description": "URL to link in the article",
      "displayOptions": {
        "show": {
          "operation": ["createArticle"]
        }
      }
    },
    {
      "name": "imageUrl",
      "displayName": "Image URL",
      "type": "string",
      "default": "",
      "required": true,
      "description": "URL of the image to share",
      "displayOptions": {
        "show": {
          "operation": ["shareImage"]
        }
      }
    },
    {
      "name": "videoUrl",
      "displayName": "Video URL",
      "type": "string",
      "default": "",
      "required": true,
      "description": "URL of the video to share",
      "displayOptions": {
        "show": {
          "operation": ["shareVideo"]
        }
      }
    }
  ],
  "executionCode": "helpers.log('Executing LinkedIn operation:', node.properties.operation.value);\n\nconst accessToken = node.properties.credential.value;\nconst operation = node.properties.operation.value;\nconst personUrn = node.properties.personUrn.value;\nconst visibility = node.properties.visibility.value;\n\nlet sharePayload = {\n  author: personUrn,\n  lifecycleState: 'PUBLISHED',\n  visibility: {\n    'com.linkedin.ugc.MemberNetworkVisibility': visibility\n  }\n};\n\nlet result;\n\nif (operation === 'createPost') {\n  const text = node.properties.text.value;\n  \n  helpers.log('Creating LinkedIn post');\n  \n  sharePayload.specificContent = {\n    'com.linkedin.ugc.ShareContent': {\n      shareCommentary: {\n        text: text\n      },\n      shareMediaCategory: 'NONE'\n    }\n  };\n  \n  const response = await fetch('https://api.linkedin.com/v2/ugcPosts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n      'X-Restli-Protocol-Version': '2.0.0'\n    },\n    body: JSON.stringify(sharePayload)\n  });\n  \n  result = await response.json();\n  \n  if (!response.ok) {\n    helpers.error('LinkedIn API error:', result.message || result);\n    throw new Error(`LinkedIn API error: ${result.message || 'Unknown error'}`);\n  }\n  \n  helpers.log('Post created successfully:', result.id);\n  \n} else if (operation === 'createArticle') {\n  const title = node.properties.articleTitle.value;\n  const text = node.properties.articleText.value;\n  const url = node.properties.articleUrl.value;\n  \n  helpers.log('Creating LinkedIn article:', title);\n  \n  sharePayload.specificContent = {\n    'com.linkedin.ugc.ShareContent': {\n      shareCommentary: {\n        text: text\n      },\n      shareMediaCategory: 'ARTICLE',\n      media: [\n        {\n          status: 'READY',\n          originalUrl: url,\n          title: {\n            text: title\n          }\n        }\n      ]\n    }\n  };\n  \n  const response = await fetch('https://api.linkedin.com/v2/ugcPosts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n      'X-Restli-Protocol-Version': '2.0.0'\n    },\n    body: JSON.stringify(sharePayload)\n  });\n  \n  result = await response.json();\n  \n  if (!response.ok) {\n    helpers.error('LinkedIn API error:', result.message || result);\n    throw new Error(`LinkedIn API error: ${result.message || 'Unknown error'}`);\n  }\n  \n  helpers.log('Article shared successfully:', result.id);\n  \n} else if (operation === 'shareImage') {\n  const text = node.properties.text.value;\n  const imageUrl = node.properties.imageUrl.value;\n  \n  helpers.log('Sharing image post on LinkedIn');\n  \n  sharePayload.specificContent = {\n    'com.linkedin.ugc.ShareContent': {\n      shareCommentary: {\n        text: text\n      },\n      shareMediaCategory: 'IMAGE',\n      media: [\n        {\n          status: 'READY',\n          originalUrl: imageUrl\n        }\n      ]\n    }\n  };\n  \n  const response = await fetch('https://api.linkedin.com/v2/ugcPosts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n      'X-Restli-Protocol-Version': '2.0.0'\n    },\n    body: JSON.stringify(sharePayload)\n  });\n  \n  result = await response.json();\n  \n  if (!response.ok) {\n    helpers.error('LinkedIn API error:', result.message || result);\n    throw new Error(`LinkedIn API error: ${result.message || 'Unknown error'}`);\n  }\n  \n  helpers.log('Image post shared successfully:', result.id);\n  \n} else if (operation === 'shareVideo') {\n  const text = node.properties.text.value;\n  const videoUrl = node.properties.videoUrl.value;\n  \n  helpers.log('Sharing video post on LinkedIn');\n  helpers.warn('Note: Video upload on LinkedIn requires a multi-step process. This is a simplified implementation.');\n  \n  sharePayload.specificContent = {\n    'com.linkedin.ugc.ShareContent': {\n      shareCommentary: {\n        text: text\n      },\n      shareMediaCategory: 'VIDEO',\n      media: [\n        {\n          status: 'READY',\n          originalUrl: videoUrl\n        }\n      ]\n    }\n  };\n  \n  const response = await fetch('https://api.linkedin.com/v2/ugcPosts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n      'X-Restli-Protocol-Version': '2.0.0'\n    },\n    body: JSON.stringify(sharePayload)\n  });\n  \n  result = await response.json();\n  \n  if (!response.ok) {\n    helpers.error('LinkedIn API error:', result.message || result);\n    throw new Error(`LinkedIn API error: ${result.message || 'Unknown error'}`);\n  }\n  \n  helpers.log('Video post shared successfully:', result.id);\n}\n\nreturn {\n  ...data,\n  linkedin: result\n};",
  "meta": {
    "author": "Nodify System",
    "createdAt": "2025-10-23",
    "updatedAt": "2025-10-23"
  }
}
