{
  "id": "notion_create_page",
  "version": "1.0",
  "name": "Notion Create Page",
  "description": "Create a page in a Notion database using an integration token.",
  "group": "Data",
  "category": "data",
  "executionEnvironment": "server",
  "shape": "2x2",
  "color": "#000000",
  "icon": "FileText",
  "inputs": [ { "id": "main", "label": "Input", "position": "left", "type": "any", "slot": 1 } ],
  "outputs": [ { "id": "main", "label": "Output", "position": "right", "type": "json", "slot": 1 }, { "id": "error", "label": "Error", "position": "right", "type": "any", "slot": 2 } ],
  "properties": [
    { "name": "credentials", "displayName": "Notion Credentials", "type": "credentials", "typeOptions": { "credentialType": "notion" }, "required": true },
    { "name": "databaseId", "displayName": "Database ID", "type": "string", "required": true },
    { "name": "propertiesJson", "displayName": "Properties (JSON)", "type": "json", "ui": { "component": "textarea" }, "default": "{}" },
    { "name": "childrenJson", "displayName": "Children (JSON, optional)", "type": "json", "ui": { "component": "textarea" }, "default": "[]" }
  ],
  "executionCode": "try {\n  const fetch = (await import('node-fetch')).default;\n  const credentialId = node.properties.credentials?.value;\n  const databaseId = node.properties.databaseId?.value;\n  let propertiesJson = node.properties.propertiesJson?.value;\n  let childrenJson = node.properties.childrenJson?.value;\n  if (typeof propertiesJson === 'string') { try { propertiesJson = JSON.parse(propertiesJson || '{}'); } catch { propertiesJson = {}; } }\n  if (typeof childrenJson === 'string') { try { childrenJson = JSON.parse(childrenJson || '[]'); } catch { childrenJson = []; } }\n  if (!credentialId) return { path: 'error', error: 'Credential is required' };\n  if (!databaseId) return { path: 'error', error: 'databaseId is required' };\n\n  let token = null;\n  if (typeof helpers.getCredentialData === 'function') { const cred = await helpers.getCredentialData(credentialId); token = cred?.apiKey || cred?.token || null; }\n  if (!token && services) { const snap = await services.getDoc(services.doc(services.db, 'users', services.user.uid, 'credentials', credentialId)); if (snap.exists()) { const d = snap.data(); token = d?.data?.apiKey || d?.data?.token || null; } }\n  if (!token && env?.NOTION_TOKEN) token = env.NOTION_TOKEN;\n  if (!token) return { path: 'error', error: 'No Notion token provided' };\n\n  const res = await fetch('https://api.notion.com/v1/pages', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`, 'Notion-Version': '2022-06-28' }, body: JSON.stringify({ parent: { database_id: databaseId }, properties: propertiesJson || {}, children: childrenJson || [] }) });\n  const result = await res.json();\n  if (!res.ok) return { path: 'error', error: result.message || result?.error || 'Notion API error', status: res.status, details: result };\n  return { success: true, id: result.id, url: result.url, raw: result };\n} catch (e) { return { path: 'error', error: e.message, stack: e.stack }; }\n",
  "meta": { "author": "Nodify System", "createdAt": "2025-10-22" }
}

