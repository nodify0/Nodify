{
  "id": "merge_node",
  "version": "1.0",
  "name": "Merge",
  "description": "Combine data from multiple branches into one.",
  "group": "Logic",
  "category": "logic",
  "shape": "2x2",
  "color": "#6366F1",
  "icon": "GitMerge",
  "inputs": [
    {
      "id": "input1",
      "label": "Input 1",
      "position": "left",
      "type": "any",
      "slot": 1
    },
    {
      "id": "input2",
      "label": "Input 2",
      "position": "left",
      "type": "any",
      "slot": 2
    }
  ],
  "outputs": [
    {
      "id": "main",
      "label": "Output",
      "position": "right",
      "type": "json",
      "slot": 1
    }
  ],
  "properties": [
    {
      "name": "mergeMode",
      "displayName": "Merge Mode",
      "type": "options",
      "default": "combine",
      "options": [
        {
          "value": "combine",
          "label": "Combine (Merge Objects)"
        },
        {
          "value": "append",
          "label": "Append (Create Array)"
        }
      ]
    }
  ],
  "executionCode": "helpers.log('Starting Merge node');\nconst mode = node.properties.mergeMode.value;\nhelpers.log(`Merge mode: ${mode}`);\nconst input1 = data.input1 || {};\nconst input2 = data.input2 || {};\nhelpers.log(`Input 1 type: ${Array.isArray(input1) ? 'array' : typeof input1}`);\nhelpers.log(`Input 2 type: ${Array.isArray(input2) ? 'array' : typeof input2}`);\nlet result;\nif (mode === 'append') {\n  helpers.log('Creating array with both inputs');\n  result = [input1, input2];\n  helpers.log(`Result: array with ${result.length} items`);\n} else {\n  helpers.log('Combining objects (Input 2 overwrites Input 1)');\n  result = { ...input1, ...input2 };\n  helpers.log(`Result: object with ${Object.keys(result).length} fields`);\n}\nreturn result;",
  "meta": {
    "author": "Nodify System",
    "createdAt": "2025-10-06"
  }
}