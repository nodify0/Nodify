
import type { Post, Comment, CommunityProfile } from "./community-types";
import { subDays, subHours, subMinutes } from "date-fns";

const now = new Date();

export const mockProfiles: CommunityProfile[] = [
  {
    id: "user-1",
    userId: "user-1",
    username: "alex",
    displayName: "Alex Johnson",
    avatar: "https://i.pravatar.cc/150?u=alex",
    bio: "Workflow automation enthusiast.",
    role: "admin",
    badges: ["founder", "pro-user"],
    reputation: 1500,
    createdAt: subDays(now, 100).toISOString(),
    updatedAt: subDays(now, 5).toISOString(),
    stats: { postsCount: 3, commentsCount: 5, helpfulCount: 12, solutionsCount: 2 },
  },
  {
    id: "user-2",
    userId: "user-2",
    username: "brian",
    displayName: "Brian Dla Rose",
    avatar: "https://i.pravatar.cc/150?u=brian",
    bio: "Full-stack developer.",
    role: "member",
    badges: ["first-post"],
    reputation: 250,
    createdAt: subDays(now, 50).toISOString(),
    updatedAt: subDays(now, 1).toISOString(),
    stats: { postsCount: 1, commentsCount: 3, helpfulCount: 2, solutionsCount: 1 },
  },
  {
    id: "user-3",
    userId: "user-3",
    username: "casey",
    displayName: "Casey Smith",
    avatar: "https://i.pravatar.cc/150?u=casey",
    bio: "Helping where I can!",
    role: "moderator",
    badges: ["helpful"],
    reputation: 800,
    createdAt: subDays(now, 200).toISOString(),
    updatedAt: subDays(now, 10).toISOString(),
    stats: { postsCount: 1, commentsCount: 10, helpfulCount: 25, solutionsCount: 8 },
  },
];

export const mockPosts: Post[] = [
  {
    id: "post-1",
    authorId: "user-1",
    authorUsername: "alex",
    authorDisplayName: "Alex Johnson",
    authorAvatar: "https://i.pravatar.cc/150?u=alex",
    authorRole: "admin",
    title: "Welcome to the Nodify Community!",
    content: "### Welcome, everyone! \n\nThis is the official community forum for Nodify. Feel free to ask questions, share your creations, and help each other out. \n\n*   **Showcase**: Share your coolest workflows. \n*   **Help**: Get assistance with problems. \n*   **Bug Reports**: Let us know if something is broken. \n\nHappy automating!",
    category: "announcement",
    tags: ["welcome", "community", "getting-started"],
    status: "published",
    viewsCount: 1250,
    likesCount: 150,
    commentsCount: 2,
    isResolved: false,
    isPinned: true,
    createdAt: subDays(now, 10).toISOString(),
    updatedAt: subDays(now, 9).toISOString(),
  },
  {
    id: "post-2",
    authorId: "user-2",
    authorUsername: "brian",
    authorDisplayName: "Brian Dla Rose",
    authorAvatar: "https://i.pravatar.cc/150?u=brian",
    authorRole: "member",
    title: "How to handle dynamic JSON in the Code node?",
    content: "I'm receiving a webhook with a JSON payload, but the structure changes sometimes. What's the best way to safely access nested properties in the Code node? \n\nFor example, sometimes I get `data.user.name` and other times `data.customer.name`. \n\nAny ideas?",
    category: "help",
    tags: ["code-node", "json", "dynamic-data"],
    status: "published",
    viewsCount: 342,
    likesCount: 12,
    commentsCount: 2,
    isResolved: true,
    acceptedAnswerId: "comment-2-1",
    isPinned: false,
    createdAt: subDays(now, 5).toISOString(),
    updatedAt: subDays(now, 4).toISOString(),
  },
  {
    id: "post-3",
    authorId: "user-3",
    authorUsername: "casey",
    authorDisplayName: "Casey Smith",
    authorAvatar: "https://i.pravatar.cc/150?u=casey",
    authorRole: "moderator",
    title: "Showcase: Automated Daily Weather Report to Slack",
    content: "Check out this workflow I built! \n\nIt uses the **Cron** node to run every morning, calls the OpenWeatherMap API with an **HTTP Request** node, and then formats a nice message and sends it to my team's Slack channel. \n\n![Workflow Diagram](https://picsum.photos/seed/workflow/600/400)",
    category: "showcase",
    tags: ["cron", "http-request", "slack", "api"],
    status: "published",
    viewsCount: 890,
    likesCount: 78,
    commentsCount: 1,
    isResolved: false,
    isPinned: false,
    createdAt: subHours(now, 18).toISOString(),
    updatedAt: subHours(now, 18).toISOString(),
  },
];

export const mockComments: Comment[] = [
    // Comments for Post 1
  {
    id: "comment-1-1",
    postId: "post-1",
    authorId: "user-2",
    authorUsername: "brian",
    authorDisplayName: "Brian Dla Rose",
    authorAvatar: "https://i.pravatar.cc/150?u=brian",
    authorRole: "member",
    content: "Glad to be here! Looking forward to building some cool stuff.",
    likesCount: 15,
    isAcceptedAnswer: false,
    isHelpful: true,
    helpfulCount: 10,
    createdAt: subDays(now, 9).toISOString(),
    updatedAt: subDays(now, 9).toISOString(),
  },
  {
    id: "comment-1-2",
    postId: "post-1",
    authorId: "user-3",
    authorUsername: "casey",
    authorDisplayName: "Casey Smith",
    authorAvatar: "https://i.pravatar.cc/150?u=casey",
    authorRole: "moderator",
    content: "Welcome, Brian! Let us know if you need anything.",
    parentCommentId: "comment-1-1",
    likesCount: 5,
    isAcceptedAnswer: false,
    isHelpful: false,
    helpfulCount: 0,
    createdAt: subDays(now, 8).toISOString(),
    updatedAt: subDays(now, 8).toISOString(),
  },
  // Comments for Post 2
  {
    id: "comment-2-1",
    postId: "post-2",
    authorId: "user-1",
    authorUsername: "alex",
    authorDisplayName: "Alex Johnson",
    authorAvatar: "https://i.pravatar.cc/150?u=alex",
    authorRole: "admin",
    content: "Great question! You can use optional chaining and the nullish coalescing operator in your expression. \n\nFor example: `{{data.user?.name ?? data.customer?.name ?? 'Unknown'}}` \n\nThis will safely check for `user.name`, then `customer.name`, and fall back to 'Unknown' if neither exist.",
    likesCount: 25,
    isAcceptedAnswer: true,
    isHelpful: true,
    helpfulCount: 20,
    createdAt: subDays(now, 4).toISOString(),
    updatedAt: subDays(now, 4).toISOString(),
  },
  {
    id: "comment-2-2",
    postId: "post-2",
    authorId: "user-2",
    authorUsername: "brian",
    authorDisplayName: "Brian Dla Rose",
    authorAvatar: "https://i.pravatar.cc/150?u=brian",
    authorRole: "member",
    content: "Wow, that's perfect! Thank you so much, Alex!",
    parentCommentId: "comment-2-1",
    likesCount: 3,
    isAcceptedAnswer: false,
    isHelpful: false,
    helpfulCount: 0,
    createdAt: subDays(now, 3).toISOString(),
    updatedAt: subDays(now, 3).toISOString(),
  },
  // Comments for Post 3
   {
    id: "comment-3-1",
    postId: "post-3",
    authorId: "user-1",
    authorUsername: "alex",
    authorDisplayName: "Alex Johnson",
    authorAvatar: "https://i.pravatar.cc/150?u=alex",
    authorRole: "admin",
    content: "This is awesome, Casey! Great example of combining different nodes.",
    likesCount: 8,
    isAcceptedAnswer: false,
    isHelpful: true,
    helpfulCount: 5,
    createdAt: subHours(now, 10).toISOString(),
    updatedAt: subHours(now, 10).toISOString(),
  },
];
